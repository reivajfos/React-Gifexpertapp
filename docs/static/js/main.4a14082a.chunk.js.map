{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","film","type","value","onChange","target","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2MAIaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAkBA,OAGI,sBAAMC,SAhBW,SAACC,GAGlBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAc,SAAAS,GAAI,OAAGP,GAAH,mBAAiBO,OACnCN,EAAc,MASlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAxBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,QCJlBG,EAAc,SAAC,GAAqB,EAAnBC,GAAoB,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IAGpC,OAEI,sBAAKC,UAAU,2DAAf,UACI,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,4BAAIA,Q,uBCXHK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbN,EAFa,0FAE4EO,UAAUF,GAFtF,qBAIAG,MAAMR,GAJN,cAIbS,EAJa,gBAMIA,EAAKC,OANT,uBAMXC,EANW,EAMXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAGzB,MAAO,CACHhB,GAAIgB,EAAIhB,GACRC,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIC,cAAN,aAAE,EAAYC,iBAAiBhB,QAdvB,kBAmBZY,GAnBY,4CAAH,sDCMPK,EAAU,SAAC,GAAkB,IAAhBZ,EAAe,EAAfA,SAItB,ECPwB,SAACA,GAEzB,MAA0BrB,mBAAS,CAE/B2B,KAAM,GACNO,SAAS,IAHb,mBAAOC,EAAP,KAAcC,EAAd,KA0BA,OAnBAC,qBAAU,WAKFjB,EAAQC,GAAUiB,MAAK,SAAAR,GACnB,OAAOM,EAAS,CACZT,KAAMG,EACNI,SAAS,SAOtB,CAACb,IAIGc,EDrB0BI,CAAalB,GAAjCU,EAAb,EAAQJ,KAAaO,EAArB,EAAqBA,QAGrB,OACI,qCACI,oBAAIjB,UAAY,sDAAhB,SAAuEI,IAItEa,GAAY,wCAKT,qBAAKjB,UAAU,YAAf,SAIQc,EAAOF,KAAI,SAAAC,GACP,OAAO,cAAC,EAAD,eAA8BA,GAAZA,EAAIhB,aExB5C0B,EAAe,WAIxB,MAAoCxC,mBAAS,CAAC,cAA9C,mBAAOyC,EAAP,KAAmB1C,EAAnB,KAUA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6CACA,6BAEQ0C,EAAWZ,KAAI,SAAAR,GAAQ,OAEnB,cAAC,EAAD,CAASA,SAAYA,GAAkBA,YCxB/DqB,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.4a14082a.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport  PropTypes from 'prop-types';\r\n\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n\r\n\r\n        e.preventDefault(); //evita que refresque\r\n\r\n        if(inputValue.trim().length > 2){\r\n            setCategories(film=>[inputValue,...film]);\r\n            setInputValue('');\r\n        }\r\n\r\n       \r\n\r\n    };\r\n    return (\r\n\r\n\r\n        <form onSubmit = {handleSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={handleInputChange}\r\n            />\r\n        </form>\r\n\r\n    );\r\n};\r\n\r\nAddCategory.propTypes  = {\r\n\r\n    setCategories  : PropTypes.func.isRequired,\r\n}","\r\nimport React from \"react\";\r\n\r\n\r\nexport const GifGridItem = ({ id,title ,url}) => {\r\n\r\n  \r\n    return (\r\n\r\n        <div className=\"card animate__animated animate__bounce animate__repeat-2\">\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n\r\n\r\n    );\r\n\r\n};","export const getGifs = async (category) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=oQlk8nZFlw8wUrVu9bQgZWn8n4rFtNW6&q=${encodeURI(category)}&limit=5`;\r\n\r\n    const resp = await fetch(url);\r\n\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map(img => {\r\n\r\n\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n\r\n    });\r\n  \r\n    return gifs;\r\n}\r\n","\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { GifGridItem } from './GifGridItem';\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n\r\n\r\n    const { data:images, loading } = useFetchGifs(category);\r\n\r\n  \r\n    return (\r\n        <>\r\n            <h2 className = \"animate__animated animate__bounce animate__repeat-2\">{category}</h2>\r\n\r\n\r\n\r\n            {loading &&  <p>Loading</p>}\r\n\r\n\r\n            \r\n\r\n                <div className=\"card-grid\">\r\n\r\n\r\n                    {\r\n                        images.map(img => {\r\n                            return <GifGridItem key={img.id} {...img} />\r\n                        })\r\n                    }\r\n\r\n                </div>\r\n            \r\n        </>\r\n    );\r\n\r\n\r\n};","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setState] = useState({\r\n\r\n        data: [],\r\n        loading: true,\r\n\r\n    });\r\n\r\n    useEffect(() => { //solo sirve para\r\n\r\n       \r\n\r\n\r\n            getGifs(category).then(img => {\r\n                return setState({\r\n                    data: img,\r\n                    loading: false,\r\n                })\r\n            })\r\n\r\n       \r\n\r\n\r\n    }, [category]);\r\n\r\n\r\n\r\n    return state;\r\n\r\n}","\r\n\r\nimport React, { useState } from \"react\";\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport { GifGrid } from \"./components/GifGrid\";\r\nexport const GifExpertApp = () => {\r\n\r\n    //const categories = ['One Punch','Dragon Ball','One Piece'];\r\n\r\n    const [categories, setCategories] = useState(['One Piece']);\r\n    /*\r\n    const handleAdd = ()=>{\r\n       //setCategories(['Topolino',...categories]);\r\n       setCategories(film=>[...categories,'Tutto Reality']);\r\n\r\n    }\r\n\r\n    */\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={setCategories} />\r\n            <hr />\r\n            <button >Agregar</button>\r\n            <ol>\r\n                {\r\n                    categories.map(category => (\r\n\r\n                        <GifGrid category = {category}  key = {category}/>\r\n                    \r\n                    ))\r\n\r\n                }\r\n            </ol>\r\n        </>\r\n    );\r\n}\r\n\r\n\r\n//export default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {GifExpertApp} from './GifExpertApp';\n\nReactDOM.render(\n \n    <GifExpertApp />,\n \n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}